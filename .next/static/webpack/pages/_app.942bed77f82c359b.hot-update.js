"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./context/ListContext.js":
/*!********************************!*\
  !*** ./context/ListContext.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ListProvider: function() { return /* binding */ ListProvider; },\n/* harmony export */   useList: function() { return /* binding */ useList; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\nconst ListContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst useList = ()=>{\n    _s();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ListContext);\n    if (!context) {\n        throw new Error(\"useList must be used within a ListProvider\");\n    }\n    return context;\n};\n_s(useList, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst ListProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [list, setList] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        items: []\n    });\n    const [lastRefresh, setLastRefresh] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const initialLoadDone = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"ListProvider mounted\");\n        if (!initialLoadDone.current) {\n            const savedList = localStorage.getItem(\"list\");\n            console.log(\"Initial load - Saved list from localStorage:\", savedList);\n            if (savedList) {\n                try {\n                    const parsedList = JSON.parse(savedList);\n                    console.log(\"Parsed list:\", parsedList);\n                    if (parsedList.expiration > Date.now()) {\n                        console.log(\"List is not expired, setting list from localStorage\");\n                        setList(parsedList.data);\n                        setLastRefresh(parsedList.lastRefresh);\n                    } else {\n                        console.log(\"List is expired, removing from localStorage\");\n                        localStorage.removeItem(\"list\");\n                    }\n                } catch (error) {\n                    console.error(\"Error parsing saved list:\", error);\n                }\n            } else {\n                console.log(\"No saved list found in localStorage\");\n            }\n            initialLoadDone.current = true;\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (initialLoadDone.current) {\n            console.log(\"List or lastRefresh changed, updating localStorage\", {\n                list,\n                lastRefresh\n            });\n            const listData = {\n                data: list,\n                expiration: Date.now() + 30 * 24 * 60 * 60 * 1000,\n                lastRefresh\n            };\n            localStorage.setItem(\"list\", JSON.stringify(listData));\n            console.log(\"Updated localStorage with new list data\");\n        }\n    }, [\n        list,\n        lastRefresh\n    ]);\n    const generateUniqueId = (item)=>{\n        const idParts = [\n            item.id,\n            item.asin,\n            item.source,\n            item.title,\n            item.brand,\n            item.price\n        ].filter(Boolean);\n        return idParts.join(\"-\").replace(/[^a-zA-Z0-9-]/g, \"-\").toLowerCase();\n    };\n    const addToList = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((newItem)=>{\n        console.log(\"Adding item to list:\", newItem);\n        setList((prevList)=>{\n            console.log(\"Previous list state:\", prevList);\n            const uniqueId = generateUniqueId(newItem);\n            const existingItemIndex = prevList.items.findIndex((item)=>generateUniqueId(item) === uniqueId);\n            let updatedList;\n            if (existingItemIndex !== -1) {\n                console.log(\"Item already exists, updating quantity\");\n                const updatedItems = prevList.items.map((item, index)=>index === existingItemIndex ? {\n                        ...item,\n                        quantity: (item.quantity || 1) + 1\n                    } : item);\n                updatedList = {\n                    ...prevList,\n                    items: updatedItems\n                };\n            } else {\n                console.log(\"Adding new item to list\");\n                updatedList = {\n                    ...prevList,\n                    items: [\n                        ...prevList.items,\n                        {\n                            ...newItem,\n                            uniqueId,\n                            quantity: 1,\n                            originalPrice: newItem.price,\n                            lastVerifiedPrice: newItem.price,\n                            lastUpdated: new Date().toISOString()\n                        }\n                    ]\n                };\n            }\n            console.log(\"Updated list state:\", updatedList);\n            return updatedList;\n        });\n    }, []);\n    const removeFromList = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((uniqueId)=>{\n        console.log(\"Removing item from list:\", uniqueId);\n        setList((prevList)=>{\n            const updatedList = {\n                ...prevList,\n                items: prevList.items.filter((item)=>item.uniqueId !== uniqueId)\n            };\n            console.log(\"Updated list after removal:\", updatedList);\n            return updatedList;\n        });\n    }, []);\n    const updateQuantity = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((uniqueId, newQuantity)=>{\n        console.log(\"Updating quantity:\", uniqueId, newQuantity);\n        setList((prevList)=>{\n            const updatedItems = prevList.items.map((item)=>{\n                if (item.uniqueId === uniqueId) {\n                    return {\n                        ...item,\n                        quantity: newQuantity\n                    };\n                }\n                return item;\n            });\n            const updatedList = {\n                ...prevList,\n                items: updatedItems\n            };\n            console.log(\"Updated list after quantity change:\", updatedList);\n            return updatedList;\n        });\n    }, []);\n    const addNote = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((uniqueId, note)=>{\n        console.log(\"Adding note:\", uniqueId, note);\n        setList((prevList)=>{\n            const updatedItems = prevList.items.map((item)=>item.uniqueId === uniqueId ? {\n                    ...item,\n                    note\n                } : item);\n            const updatedList = {\n                ...prevList,\n                items: updatedItems\n            };\n            console.log(\"Updated list after adding note:\", updatedList);\n            return updatedList;\n        });\n    }, []);\n    const refreshList = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        console.log(\"Refreshing list, current items:\", list.items);\n        if (list.items.length === 0) {\n            console.log(\"List is empty, nothing to refresh\");\n            return;\n        }\n        const updatedItems = await Promise.all(list.items.map(async (item)=>{\n            try {\n                var _item_link;\n                const source = item.source || (((_item_link = item.link) === null || _item_link === void 0 ? void 0 : _item_link.includes(\"amazon.com\")) ? \"amazon\" : \"walmart\");\n                const url = \"https://api.scraperapi.com/structured/\".concat(source, \"/search\");\n                const params = {\n                    api_key: process.env.NEXT_PUBLIC_SCRAPER_API_KEY,\n                    query: item.title,\n                    country: \"us\"\n                };\n                console.log(\"Fetching data for item: \".concat(item.title));\n                const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(url, {\n                    params\n                });\n                const newData = response.data.results[0];\n                if (newData && newData.price) {\n                    console.log(\"Updated price for \".concat(item.title, \": \").concat(newData.price));\n                    return {\n                        ...item,\n                        lastVerifiedPrice: newData.price,\n                        lastUpdated: new Date().toISOString()\n                    };\n                } else {\n                    console.log(\"No new data for \".concat(item.title, \", keeping original\"));\n                    return item;\n                }\n            } catch (error) {\n                console.error(\"Error refreshing item \".concat(item.title, \":\"), error);\n                return item; // Return the original item if there's an error\n            }\n        }));\n        console.log(\"Updated items after refresh:\", updatedItems);\n        if (updatedItems.length > 0) {\n            setList((prevList)=>{\n                const newList = {\n                    ...prevList,\n                    items: updatedItems\n                };\n                console.log(\"New list after refresh:\", newList);\n                return newList;\n            });\n            setLastRefresh(new Date().toISOString());\n            // Update localStorage\n            const listData = {\n                data: {\n                    items: updatedItems\n                },\n                expiration: Date.now() + 30 * 24 * 60 * 60 * 1000,\n                lastRefresh: new Date().toISOString()\n            };\n            localStorage.setItem(\"list\", JSON.stringify(listData));\n            console.log(\"Updated localStorage after refresh\");\n        } else {\n            console.log(\"No items were updated during refresh\");\n        }\n    }, [\n        list.items\n    ]);\n    const clearList = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        console.log(\"Clearing list\");\n        setList({\n            items: []\n        });\n        localStorage.removeItem(\"list\");\n        console.log(\"List cleared and removed from localStorage\");\n    }, []);\n    console.log(\"Rendering ListProvider, current list:\", list);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ListContext.Provider, {\n        value: {\n            list,\n            addToList,\n            removeFromList,\n            updateQuantity,\n            addNote,\n            clearList,\n            refreshList,\n            lastRefresh\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/dangnguyen/popstart/context/ListContext.js\",\n        lineNumber: 216,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(ListProvider, \"Gdq2DVUIue7z/K/PTixwRUrtBnU=\");\n_c = ListProvider;\nvar _c;\n$RefreshReg$(_c, \"ListProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQVU7b0JBQUUsR0FBR3BDLFFBQVE7b0JBQUV0QyxPQUFPMkM7Z0JBQWE7Z0JBQ25EdkMsUUFBUUMsR0FBRyxDQUFDLDJCQUEyQnFFO2dCQUN2QyxPQUFPQTtZQUNUO1lBQ0F4RSxlQUFlLElBQUlZLE9BQU9vQyxXQUFXO1lBRXJDLHNCQUFzQjtZQUN0QixNQUFNL0IsV0FBVztnQkFDZkgsTUFBTTtvQkFBRWhCLE9BQU8yQztnQkFBYTtnQkFDNUI5QixZQUFZQyxLQUFLQyxHQUFHLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztnQkFDN0NkLGFBQWEsSUFBSWEsT0FBT29DLFdBQVc7WUFDckM7WUFDQTFDLGFBQWFZLE9BQU8sQ0FBQyxRQUFRVCxLQUFLVSxTQUFTLENBQUNGO1lBQzVDZixRQUFRQyxHQUFHLENBQUM7UUFDZCxPQUFPO1lBQ0xELFFBQVFDLEdBQUcsQ0FBQztRQUNkO0lBQ0YsR0FBRztRQUFDUCxLQUFLRSxLQUFLO0tBQUM7SUFFZixNQUFNMkUsWUFBWXRGLGtEQUFXQSxDQUFDO1FBQzVCZSxRQUFRQyxHQUFHLENBQUM7UUFDWk4sUUFBUTtZQUFFQyxPQUFPLEVBQUU7UUFBQztRQUNwQlEsYUFBYVMsVUFBVSxDQUFDO1FBQ3hCYixRQUFRQyxHQUFHLENBQUM7SUFDZCxHQUFHLEVBQUU7SUFFTEQsUUFBUUMsR0FBRyxDQUFDLHlDQUF5Q1A7SUFFckQscUJBQ0UsOERBQUNOLFlBQVlvRixRQUFRO1FBQUNDLE9BQU87WUFDM0IvRTtZQUNBc0M7WUFDQWU7WUFDQUM7WUFDQUU7WUFDQXFCO1lBQ0FuQjtZQUNBdkQ7UUFDRjtrQkFDR0o7Ozs7OztBQUdQLEVBQUU7SUF2TldEO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbnRleHQvTGlzdENvbnRleHQuanM/NjVmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNvbnN0IExpc3RDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuXG5leHBvcnQgY29uc3QgdXNlTGlzdCA9ICgpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICBpZiAoIWNvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZUxpc3QgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIExpc3RQcm92aWRlcicpO1xuICB9XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxuZXhwb3J0IGNvbnN0IExpc3RQcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgW2xpc3QsIHNldExpc3RdID0gdXNlU3RhdGUoeyBpdGVtczogW10gfSk7XG4gIGNvbnN0IFtsYXN0UmVmcmVzaCwgc2V0TGFzdFJlZnJlc2hdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IGluaXRpYWxMb2FkRG9uZSA9IHVzZVJlZihmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnTGlzdFByb3ZpZGVyIG1vdW50ZWQnKTtcbiAgICBpZiAoIWluaXRpYWxMb2FkRG9uZS5jdXJyZW50KSB7XG4gICAgICBjb25zdCBzYXZlZExpc3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGlzdCcpO1xuICAgICAgY29uc29sZS5sb2coJ0luaXRpYWwgbG9hZCAtIFNhdmVkIGxpc3QgZnJvbSBsb2NhbFN0b3JhZ2U6Jywgc2F2ZWRMaXN0KTtcbiAgICAgIGlmIChzYXZlZExpc3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBwYXJzZWRMaXN0ID0gSlNPTi5wYXJzZShzYXZlZExpc3QpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdQYXJzZWQgbGlzdDonLCBwYXJzZWRMaXN0KTtcbiAgICAgICAgICBpZiAocGFyc2VkTGlzdC5leHBpcmF0aW9uID4gRGF0ZS5ub3coKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0xpc3QgaXMgbm90IGV4cGlyZWQsIHNldHRpbmcgbGlzdCBmcm9tIGxvY2FsU3RvcmFnZScpO1xuICAgICAgICAgICAgc2V0TGlzdChwYXJzZWRMaXN0LmRhdGEpO1xuICAgICAgICAgICAgc2V0TGFzdFJlZnJlc2gocGFyc2VkTGlzdC5sYXN0UmVmcmVzaCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMaXN0IGlzIGV4cGlyZWQsIHJlbW92aW5nIGZyb20gbG9jYWxTdG9yYWdlJyk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnbGlzdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwYXJzaW5nIHNhdmVkIGxpc3Q6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnTm8gc2F2ZWQgbGlzdCBmb3VuZCBpbiBsb2NhbFN0b3JhZ2UnKTtcbiAgICAgIH1cbiAgICAgIGluaXRpYWxMb2FkRG9uZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpbml0aWFsTG9hZERvbmUuY3VycmVudCkge1xuICAgICAgY29uc29sZS5sb2coJ0xpc3Qgb3IgbGFzdFJlZnJlc2ggY2hhbmdlZCwgdXBkYXRpbmcgbG9jYWxTdG9yYWdlJywgeyBsaXN0LCBsYXN0UmVmcmVzaCB9KTtcbiAgICAgIGNvbnN0IGxpc3REYXRhID0ge1xuICAgICAgICBkYXRhOiBsaXN0LFxuICAgICAgICBleHBpcmF0aW9uOiBEYXRlLm5vdygpICsgMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwLCAvLyAzMCBkYXlzIGZyb20gbm93XG4gICAgICAgIGxhc3RSZWZyZXNoXG4gICAgICB9O1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xpc3QnLCBKU09OLnN0cmluZ2lmeShsaXN0RGF0YSkpO1xuICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZWQgbG9jYWxTdG9yYWdlIHdpdGggbmV3IGxpc3QgZGF0YScpO1xuICAgIH1cbiAgfSwgW2xpc3QsIGxhc3RSZWZyZXNoXSk7XG5cbiAgY29uc3QgZ2VuZXJhdGVVbmlxdWVJZCA9IChpdGVtKSA9PiB7XG4gICAgY29uc3QgaWRQYXJ0cyA9IFtcbiAgICAgIGl0ZW0uaWQsXG4gICAgICBpdGVtLmFzaW4sXG4gICAgICBpdGVtLnNvdXJjZSxcbiAgICAgIGl0ZW0udGl0bGUsXG4gICAgICBpdGVtLmJyYW5kLFxuICAgICAgaXRlbS5wcmljZVxuICAgIF0uZmlsdGVyKEJvb2xlYW4pO1xuICAgIFxuICAgIHJldHVybiBpZFBhcnRzLmpvaW4oJy0nKS5yZXBsYWNlKC9bXmEtekEtWjAtOS1dL2csICctJykudG9Mb3dlckNhc2UoKTtcbiAgfTtcblxuICBjb25zdCBhZGRUb0xpc3QgPSB1c2VDYWxsYmFjaygobmV3SXRlbSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdBZGRpbmcgaXRlbSB0byBsaXN0OicsIG5ld0l0ZW0pO1xuICAgIHNldExpc3QoKHByZXZMaXN0KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnUHJldmlvdXMgbGlzdCBzdGF0ZTonLCBwcmV2TGlzdCk7XG4gICAgICBjb25zdCB1bmlxdWVJZCA9IGdlbmVyYXRlVW5pcXVlSWQobmV3SXRlbSk7XG4gICAgICBjb25zdCBleGlzdGluZ0l0ZW1JbmRleCA9IHByZXZMaXN0Lml0ZW1zLmZpbmRJbmRleChpdGVtID0+IGdlbmVyYXRlVW5pcXVlSWQoaXRlbSkgPT09IHVuaXF1ZUlkKTtcblxuICAgICAgbGV0IHVwZGF0ZWRMaXN0O1xuICAgICAgaWYgKGV4aXN0aW5nSXRlbUluZGV4ICE9PSAtMSkge1xuICAgICAgICBjb25zb2xlLmxvZygnSXRlbSBhbHJlYWR5IGV4aXN0cywgdXBkYXRpbmcgcXVhbnRpdHknKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZEl0ZW1zID0gcHJldkxpc3QuaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4gXG4gICAgICAgICAgaW5kZXggPT09IGV4aXN0aW5nSXRlbUluZGV4IFxuICAgICAgICAgICAgPyB7IC4uLml0ZW0sIHF1YW50aXR5OiAoaXRlbS5xdWFudGl0eSB8fCAxKSArIDEgfVxuICAgICAgICAgICAgOiBpdGVtXG4gICAgICAgICk7XG4gICAgICAgIHVwZGF0ZWRMaXN0ID0geyAuLi5wcmV2TGlzdCwgaXRlbXM6IHVwZGF0ZWRJdGVtcyB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0FkZGluZyBuZXcgaXRlbSB0byBsaXN0Jyk7XG4gICAgICAgIHVwZGF0ZWRMaXN0ID0ge1xuICAgICAgICAgIC4uLnByZXZMaXN0LFxuICAgICAgICAgIGl0ZW1zOiBbLi4ucHJldkxpc3QuaXRlbXMsIHsgXG4gICAgICAgICAgICAuLi5uZXdJdGVtLCBcbiAgICAgICAgICAgIHVuaXF1ZUlkLFxuICAgICAgICAgICAgcXVhbnRpdHk6IDEsIFxuICAgICAgICAgICAgb3JpZ2luYWxQcmljZTogbmV3SXRlbS5wcmljZSxcbiAgICAgICAgICAgIGxhc3RWZXJpZmllZFByaWNlOiBuZXdJdGVtLnByaWNlLFxuICAgICAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBsaXN0IHN0YXRlOicsIHVwZGF0ZWRMaXN0KTtcbiAgICAgIHJldHVybiB1cGRhdGVkTGlzdDtcbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHJlbW92ZUZyb21MaXN0ID0gdXNlQ2FsbGJhY2soKHVuaXF1ZUlkKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1JlbW92aW5nIGl0ZW0gZnJvbSBsaXN0OicsIHVuaXF1ZUlkKTtcbiAgICBzZXRMaXN0KChwcmV2TGlzdCkgPT4ge1xuICAgICAgY29uc3QgdXBkYXRlZExpc3QgPSB7XG4gICAgICAgIC4uLnByZXZMaXN0LFxuICAgICAgICBpdGVtczogcHJldkxpc3QuaXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnVuaXF1ZUlkICE9PSB1bmlxdWVJZClcbiAgICAgIH07XG4gICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBsaXN0IGFmdGVyIHJlbW92YWw6JywgdXBkYXRlZExpc3QpO1xuICAgICAgcmV0dXJuIHVwZGF0ZWRMaXN0O1xuICAgIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgdXBkYXRlUXVhbnRpdHkgPSB1c2VDYWxsYmFjaygodW5pcXVlSWQsIG5ld1F1YW50aXR5KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1VwZGF0aW5nIHF1YW50aXR5OicsIHVuaXF1ZUlkLCBuZXdRdWFudGl0eSk7XG4gICAgc2V0TGlzdCgocHJldkxpc3QpID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRJdGVtcyA9IHByZXZMaXN0Lml0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS51bmlxdWVJZCA9PT0gdW5pcXVlSWQpIHtcbiAgICAgICAgICByZXR1cm4geyAuLi5pdGVtLCBxdWFudGl0eTogbmV3UXVhbnRpdHkgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdXBkYXRlZExpc3QgPSB7IC4uLnByZXZMaXN0LCBpdGVtczogdXBkYXRlZEl0ZW1zIH07XG4gICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBsaXN0IGFmdGVyIHF1YW50aXR5IGNoYW5nZTonLCB1cGRhdGVkTGlzdCk7XG4gICAgICByZXR1cm4gdXBkYXRlZExpc3Q7XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBhZGROb3RlID0gdXNlQ2FsbGJhY2soKHVuaXF1ZUlkLCBub3RlKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0FkZGluZyBub3RlOicsIHVuaXF1ZUlkLCBub3RlKTtcbiAgICBzZXRMaXN0KChwcmV2TGlzdCkgPT4ge1xuICAgICAgY29uc3QgdXBkYXRlZEl0ZW1zID0gcHJldkxpc3QuaXRlbXMubWFwKChpdGVtKSA9PlxuICAgICAgICBpdGVtLnVuaXF1ZUlkID09PSB1bmlxdWVJZCA/IHsgLi4uaXRlbSwgbm90ZSB9IDogaXRlbVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHVwZGF0ZWRMaXN0ID0geyAuLi5wcmV2TGlzdCwgaXRlbXM6IHVwZGF0ZWRJdGVtcyB9O1xuICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZWQgbGlzdCBhZnRlciBhZGRpbmcgbm90ZTonLCB1cGRhdGVkTGlzdCk7XG4gICAgICByZXR1cm4gdXBkYXRlZExpc3Q7XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCByZWZyZXNoTGlzdCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnUmVmcmVzaGluZyBsaXN0LCBjdXJyZW50IGl0ZW1zOicsIGxpc3QuaXRlbXMpO1xuICAgIGlmIChsaXN0Lml0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2coJ0xpc3QgaXMgZW1wdHksIG5vdGhpbmcgdG8gcmVmcmVzaCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZWRJdGVtcyA9IGF3YWl0IFByb21pc2UuYWxsKGxpc3QuaXRlbXMubWFwKGFzeW5jIChpdGVtKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBpdGVtLnNvdXJjZSB8fCAoaXRlbS5saW5rPy5pbmNsdWRlcygnYW1hem9uLmNvbScpID8gJ2FtYXpvbicgOiAnd2FsbWFydCcpO1xuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuc2NyYXBlcmFwaS5jb20vc3RydWN0dXJlZC8ke3NvdXJjZX0vc2VhcmNoYDtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgIGFwaV9rZXk6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NDUkFQRVJfQVBJX0tFWSxcbiAgICAgICAgICBxdWVyeTogaXRlbS50aXRsZSxcbiAgICAgICAgICBjb3VudHJ5OiAndXMnXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coYEZldGNoaW5nIGRhdGEgZm9yIGl0ZW06ICR7aXRlbS50aXRsZX1gKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQodXJsLCB7IHBhcmFtcyB9KTtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IHJlc3BvbnNlLmRhdGEucmVzdWx0c1swXTtcblxuICAgICAgICBpZiAobmV3RGF0YSAmJiBuZXdEYXRhLnByaWNlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYFVwZGF0ZWQgcHJpY2UgZm9yICR7aXRlbS50aXRsZX06ICR7bmV3RGF0YS5wcmljZX1gKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgIGxhc3RWZXJpZmllZFByaWNlOiBuZXdEYXRhLnByaWNlLFxuICAgICAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYE5vIG5ldyBkYXRhIGZvciAke2l0ZW0udGl0bGV9LCBrZWVwaW5nIG9yaWdpbmFsYCk7XG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHJlZnJlc2hpbmcgaXRlbSAke2l0ZW0udGl0bGV9OmAsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGl0ZW07IC8vIFJldHVybiB0aGUgb3JpZ2luYWwgaXRlbSBpZiB0aGVyZSdzIGFuIGVycm9yXG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgY29uc29sZS5sb2coJ1VwZGF0ZWQgaXRlbXMgYWZ0ZXIgcmVmcmVzaDonLCB1cGRhdGVkSXRlbXMpO1xuICAgIGlmICh1cGRhdGVkSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgc2V0TGlzdChwcmV2TGlzdCA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0xpc3QgPSB7IC4uLnByZXZMaXN0LCBpdGVtczogdXBkYXRlZEl0ZW1zIH07XG4gICAgICAgIGNvbnNvbGUubG9nKCdOZXcgbGlzdCBhZnRlciByZWZyZXNoOicsIG5ld0xpc3QpO1xuICAgICAgICByZXR1cm4gbmV3TGlzdDtcbiAgICAgIH0pO1xuICAgICAgc2V0TGFzdFJlZnJlc2gobmV3IERhdGUoKS50b0lTT1N0cmluZygpKTtcblxuICAgICAgLy8gVXBkYXRlIGxvY2FsU3RvcmFnZVxuICAgICAgY29uc3QgbGlzdERhdGEgPSB7XG4gICAgICAgIGRhdGE6IHsgaXRlbXM6IHVwZGF0ZWRJdGVtcyB9LFxuICAgICAgICBleHBpcmF0aW9uOiBEYXRlLm5vdygpICsgMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgICAgICBsYXN0UmVmcmVzaDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9O1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xpc3QnLCBKU09OLnN0cmluZ2lmeShsaXN0RGF0YSkpO1xuICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZWQgbG9jYWxTdG9yYWdlIGFmdGVyIHJlZnJlc2gnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ05vIGl0ZW1zIHdlcmUgdXBkYXRlZCBkdXJpbmcgcmVmcmVzaCcpO1xuICAgIH1cbiAgfSwgW2xpc3QuaXRlbXNdKTtcblxuICBjb25zdCBjbGVhckxpc3QgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0NsZWFyaW5nIGxpc3QnKTtcbiAgICBzZXRMaXN0KHsgaXRlbXM6IFtdIH0pO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdsaXN0Jyk7XG4gICAgY29uc29sZS5sb2coJ0xpc3QgY2xlYXJlZCBhbmQgcmVtb3ZlZCBmcm9tIGxvY2FsU3RvcmFnZScpO1xuICB9LCBbXSk7XG5cbiAgY29uc29sZS5sb2coJ1JlbmRlcmluZyBMaXN0UHJvdmlkZXIsIGN1cnJlbnQgbGlzdDonLCBsaXN0KTtcblxuICByZXR1cm4gKFxuICAgIDxMaXN0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBcbiAgICAgIGxpc3QsIFxuICAgICAgYWRkVG9MaXN0LCBcbiAgICAgIHJlbW92ZUZyb21MaXN0LCBcbiAgICAgIHVwZGF0ZVF1YW50aXR5LCBcbiAgICAgIGFkZE5vdGUsIFxuICAgICAgY2xlYXJMaXN0LFxuICAgICAgcmVmcmVzaExpc3QsXG4gICAgICBsYXN0UmVmcmVzaCBcbiAgICB9fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0xpc3RDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTsiXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlQ2FsbGJhY2siLCJ1c2VSZWYiLCJheGlvcyIsIkxpc3RDb250ZXh0IiwidXNlTGlzdCIsImNvbnRleHQiLCJFcnJvciIsIkxpc3RQcm92aWRlciIsImNoaWxkcmVuIiwibGlzdCIsInNldExpc3QiLCJpdGVtcyIsImxhc3RSZWZyZXNoIiwic2V0TGFzdFJlZnJlc2giLCJpbml0aWFsTG9hZERvbmUiLCJjb25zb2xlIiwibG9nIiwiY3VycmVudCIsInNhdmVkTGlzdCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZWRMaXN0IiwiSlNPTiIsInBhcnNlIiwiZXhwaXJhdGlvbiIsIkRhdGUiLCJub3ciLCJkYXRhIiwicmVtb3ZlSXRlbSIsImVycm9yIiwibGlzdERhdGEiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZ2VuZXJhdGVVbmlxdWVJZCIsIml0ZW0iLCJpZFBhcnRzIiwiaWQiLCJhc2luIiwic291cmNlIiwidGl0bGUiLCJicmFuZCIsInByaWNlIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJhZGRUb0xpc3QiLCJuZXdJdGVtIiwicHJldkxpc3QiLCJ1bmlxdWVJZCIsImV4aXN0aW5nSXRlbUluZGV4IiwiZmluZEluZGV4IiwidXBkYXRlZExpc3QiLCJ1cGRhdGVkSXRlbXMiLCJtYXAiLCJpbmRleCIsInF1YW50aXR5Iiwib3JpZ2luYWxQcmljZSIsImxhc3RWZXJpZmllZFByaWNlIiwibGFzdFVwZGF0ZWQiLCJ0b0lTT1N0cmluZyIsInJlbW92ZUZyb21MaXN0IiwidXBkYXRlUXVhbnRpdHkiLCJuZXdRdWFudGl0eSIsImFkZE5vdGUiLCJub3RlIiwicmVmcmVzaExpc3QiLCJsZW5ndGgiLCJQcm9taXNlIiwiYWxsIiwibGluayIsImluY2x1ZGVzIiwidXJsIiwicGFyYW1zIiwiYXBpX2tleSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TQ1JBUEVSX0FQSV9LRVkiLCJxdWVyeSIsImNvdW50cnkiLCJyZXNwb25zZSIsImdldCIsIm5ld0RhdGEiLCJyZXN1bHRzIiwibmV3TGlzdCIsImNsZWFyTGlzdCIsIlByb3ZpZGVyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./context/ListContext.js\n"));

/***/ })

});